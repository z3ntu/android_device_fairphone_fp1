diff --git a/core/java/android/app/ActivityManager.java b/core/java/android/app/ActivityManager.java
index a29c839..e76ee97 100644
--- a/core/java/android/app/ActivityManager.java
+++ b/core/java/android/app/ActivityManager.java
@@ -382,25 +382,29 @@ public class ActivityManager {
      * @hide
      */
     static public boolean isHighEndGfx() {
-        MemInfoReader reader = new MemInfoReader();
-        reader.readMemInfo();
-        if (reader.getTotalSize() >= (512*1024*1024)) {
-            // If the device has at least 512MB RAM available to the kernel,
-            // we can afford the overhead of graphics acceleration.
-            return true;
-        }
+        if (SystemProperties.get("ro.softwaregl").equals("true")) {
+            return false;
+        } else {
+            MemInfoReader reader = new MemInfoReader();
+            reader.readMemInfo();
+            if (reader.getTotalSize() >= (512*1024*1024)) {
+                // If the device has at least 512MB RAM available to the kernel,
+                // we can afford the overhead of graphics acceleration.
+                return true;
+            }
 
-        Display display = DisplayManagerGlobal.getInstance().getRealDisplay(
-                Display.DEFAULT_DISPLAY);
-        Point p = new Point();
-        display.getRealSize(p);
-        int pixels = p.x * p.y;
-        if (pixels >= (1024*600)) {
-            // If this is a sufficiently large screen, then there are enough
-            // pixels on it that we'd really like to use hw drawing.
-            return true;
+            Display display = DisplayManagerGlobal.getInstance().getRealDisplay(
+                    Display.DEFAULT_DISPLAY);
+            Point p = new Point();
+            display.getRealSize(p);
+            int pixels = p.x * p.y;
+            if (pixels >= (1024*600)) {
+                // If this is a sufficiently large screen, then there are enough
+                // pixels on it that we'd really like to use hw drawing.
+                return true;
+            }
+            return false;
         }
-        return false;
     }
 
     /**
diff --git a/core/java/android/os/Build.java b/core/java/android/os/Build.java
index 6c9f2d1..947f1de 100644
--- a/core/java/android/os/Build.java
+++ b/core/java/android/os/Build.java
@@ -467,6 +467,10 @@ public class Build {
         return SystemProperties.get(TelephonyProperties.PROPERTY_BASEBAND_VERSION, null);
     }
 
+    public static boolean isSoftwareGl() {
+        return SystemProperties.getBoolean("ro.softwaregl", false);
+    }
+
     private static String getString(String property) {
         return SystemProperties.get(property, UNKNOWN);
     }
diff --git a/core/java/android/view/HardwareRenderer.java b/core/java/android/view/HardwareRenderer.java
index 8308459..999c8e6 100644
--- a/core/java/android/view/HardwareRenderer.java
+++ b/core/java/android/view/HardwareRenderer.java
@@ -191,14 +191,14 @@ public abstract class HardwareRenderer {
      * 
      * @hide
      */
-    public static boolean sRendererDisabled = false;
+    public static boolean sRendererDisabled = SystemProperties.get("ro.softwaregl").equals("true") ? true : false;
 
     /**
      * Further hardware renderer disabling for the system process.
      * 
      * @hide
      */
-    public static boolean sSystemRendererDisabled = false;
+    public static boolean sSystemRendererDisabled = SystemProperties.get("ro.softwaregl").equals("true") ? true : false;
 
     /**
      * Number of frames to profile.
@@ -1768,22 +1768,30 @@ public abstract class HardwareRenderer {
 
         @Override
         int[] getConfig(boolean dirtyRegions) {
-            //noinspection PointlessBooleanExpression,ConstantConditions
-            final int stencilSize = GLES20Canvas.getStencilSize();
-            final int swapBehavior = dirtyRegions ? EGL14.EGL_SWAP_BEHAVIOR_PRESERVED_BIT : 0;
-
-            return new int[] {
-                    EGL_RENDERABLE_TYPE, EGL14.EGL_OPENGL_ES2_BIT,
-                    EGL_RED_SIZE, 8,
-                    EGL_GREEN_SIZE, 8,
-                    EGL_BLUE_SIZE, 8,
-                    EGL_ALPHA_SIZE, 8,
-                    EGL_DEPTH_SIZE, 0,
-                    EGL_CONFIG_CAVEAT, EGL_NONE,
-                    EGL_STENCIL_SIZE, stencilSize,
-                    EGL_SURFACE_TYPE, EGL_WINDOW_BIT | swapBehavior,
-                    EGL_NONE
-            };
+            if (SystemProperties.get("ro.softwaregl").equals("true")) {
+                return new int[] {
+                        EGL_SURFACE_TYPE,       EGL_WINDOW_BIT,
+                        EGL_CONFIG_CAVEAT,      EGL_SLOW_CONFIG,
+                        EGL_NONE
+                };
+            } else {
+                //noinspection PointlessBooleanExpression,ConstantConditions
+                final int stencilSize = GLES20Canvas.getStencilSize();
+                final int swapBehavior = dirtyRegions ? EGL14.EGL_SWAP_BEHAVIOR_PRESERVED_BIT : 0;
+
+                return new int[] {
+                        EGL_RENDERABLE_TYPE, EGL14.EGL_OPENGL_ES2_BIT,
+                        EGL_RED_SIZE, 8,
+                        EGL_GREEN_SIZE, 8,
+                        EGL_BLUE_SIZE, 8,
+                        EGL_ALPHA_SIZE, 8,
+                        EGL_DEPTH_SIZE, 0,
+                        EGL_CONFIG_CAVEAT, EGL_NONE,
+                        EGL_STENCIL_SIZE, stencilSize,
+                        EGL_SURFACE_TYPE, EGL_WINDOW_BIT | swapBehavior,
+                        EGL_NONE
+                };
+            }
         }
 
         @Override
