diff --git a/core/java/android/app/ActivityManager.java b/core/java/android/app/ActivityManager.java
index 57d6cd3..925abcf 100644
--- a/core/java/android/app/ActivityManager.java
+++ b/core/java/android/app/ActivityManager.java
@@ -457,6 +457,10 @@ public class ActivityManager {
      * @hide
      */
     static public boolean isHighEndGfx() {
+        if (SystemProperties.get("ro.softwaregl").equals("true")) {
+            return false;
+        }
+
         return (!isLowRamDeviceStatic() &&
                 !Resources.getSystem().getBoolean(com.android.internal.R.bool.config_avoidGfxAccel))
                 || isForcedHighEndGfx();
diff --git a/core/java/android/os/Build.java b/core/java/android/os/Build.java
index 16b2b67..1585a0d 100644
--- a/core/java/android/os/Build.java
+++ b/core/java/android/os/Build.java
@@ -513,6 +513,10 @@ public class Build {
         return SystemProperties.get(TelephonyProperties.PROPERTY_BASEBAND_VERSION, null);
     }
 
+    public static boolean isSoftwareGl() {
+        return SystemProperties.getBoolean("ro.softwaregl", false);
+    }
+
     private static String getString(String property) {
         return SystemProperties.get(property, UNKNOWN);
     }
diff --git a/core/java/android/view/HardwareRenderer.java b/core/java/android/view/HardwareRenderer.java
index b3b7f7a..3c3eb23 100644
--- a/core/java/android/view/HardwareRenderer.java
+++ b/core/java/android/view/HardwareRenderer.java
@@ -213,14 +213,14 @@ public abstract class HardwareRenderer {
      *
      * @hide
      */
-    public static boolean sRendererDisabled = false;
+    public static boolean sRendererDisabled = SystemProperties.get("ro.softwaregl").equals("true") ? true : false;
 
     /**
      * Further hardware renderer disabling for the system process.
      *
      * @hide
      */
-    public static boolean sSystemRendererDisabled = false;
+    public static boolean sSystemRendererDisabled = SystemProperties.get("ro.softwaregl").equals("true") ? true : false;
 
     /**
      * Number of frames to profile.
@@ -1952,22 +1952,30 @@ public abstract class HardwareRenderer {
 
         @Override
         int[] getConfig(boolean dirtyRegions) {
-            //noinspection PointlessBooleanExpression,ConstantConditions
-            final int stencilSize = GLES20Canvas.getStencilSize();
-            final int swapBehavior = dirtyRegions ? EGL14.EGL_SWAP_BEHAVIOR_PRESERVED_BIT : 0;
-
-            return new int[] {
-                    EGL_RENDERABLE_TYPE, EGL14.EGL_OPENGL_ES2_BIT,
-                    EGL_RED_SIZE, 8,
-                    EGL_GREEN_SIZE, 8,
-                    EGL_BLUE_SIZE, 8,
-                    EGL_ALPHA_SIZE, 8,
-                    EGL_DEPTH_SIZE, 0,
-                    EGL_CONFIG_CAVEAT, EGL_NONE,
-                    EGL_STENCIL_SIZE, stencilSize,
-                    EGL_SURFACE_TYPE, EGL_WINDOW_BIT | swapBehavior,
-                    EGL_NONE
-            };
+            if (SystemProperties.get("ro.softwaregl").equals("true")) {
+                return new int[] {
+                        EGL_SURFACE_TYPE,       EGL_WINDOW_BIT,
+                        EGL_CONFIG_CAVEAT,      EGL_SLOW_CONFIG,
+                        EGL_NONE
+                };
+            } else {
+                //noinspection PointlessBooleanExpression,ConstantConditions
+                final int stencilSize = GLES20Canvas.getStencilSize();
+                final int swapBehavior = dirtyRegions ? EGL14.EGL_SWAP_BEHAVIOR_PRESERVED_BIT : 0;
+
+                return new int[] {
+                        EGL_RENDERABLE_TYPE, EGL14.EGL_OPENGL_ES2_BIT,
+                        EGL_RED_SIZE, 8,
+                        EGL_GREEN_SIZE, 8,
+                        EGL_BLUE_SIZE, 8,
+                        EGL_ALPHA_SIZE, 8,
+                        EGL_DEPTH_SIZE, 0,
+                        EGL_CONFIG_CAVEAT, EGL_NONE,
+                        EGL_STENCIL_SIZE, stencilSize,
+                        EGL_SURFACE_TYPE, EGL_WINDOW_BIT | swapBehavior,
+                        EGL_NONE
+                };
+            }
         }
 
         @Override
